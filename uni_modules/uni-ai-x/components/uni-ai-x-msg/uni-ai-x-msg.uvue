<template>
	<view class="msg-root" :class="{'ui-theme-dark': uiTheme == 'dark'}">
		<image class="avatar" src="@/uni_modules/uni-ai-x/static/uni-chat-logo.png"/>
		<text v-if="msg.error_msg != null" class="error-msg">{{msg.error_msg}}</text>
		<template v-else>
			<view class="think-content" v-if="msg.thinkContent != null">
				<view class="header" @click="changeThinkContent">
					<text class="title">深度思考 &nbsp;</text>
					<uni-icons :type="hideThinkContent ? 'down' : 'up'" size="14" color="#888"></uni-icons>
				</view>
				<view class="text-box" :class="{hideThinkContent}">
					<text class="text" :decode="true">{{msg.thinkContent}}</text>
				</view>
			</view>
			<template v-for="item in msg.markdownElList">
				<template v-for="(datas, itemIndex) in item.datasList">
					<uni-ai-msg-table class="table-box" v-if="item.type == 'table'" v-for="(data, index) in datas" :key="itemIndex + '-' + index" :table-node="data" />
					<uni-ai-msg-code class="code-box" v-else-if="item.type == 'code'" v-for="(data, index) in datas" :key="item.uniqueId + index" :codeTokens="data.codeTokens ?? []" :codeText="data.text" :language="data.lang" />
					<view v-else-if="item.type == 'hr'" v-for="(data, index) in datas" :key="item.uniqueId + index" class="hr-box"></view>
					<text v-else :decode="true" class="text" :class="item.type! +  '-box' + (item.type! == 'list' ? ' list-content' : '')">
						<text v-for="(data, index) in datas" :key="item.uniqueId + index"
							:class="data.class ?? ''" 
							@click="toLink(data.href)"
							:decode="true"
						>{{data.text}}</text>
					</text>
				</template>
		   </template>
		   <template v-if="isLastAiMsg && msg.body == ''">
				<text v-if="state == 'stop'" class="stop-text">回答被终止</text>
				<text v-if="state == 'none'" class="need-try">错误：未回复</text>
				<uni-rotate-icon v-if="state == 'processing'" class="loging-icon" />
			</template>
		</template>
		<msg-tool-bar v-if="!isLastAiMsg || state == 'stop' || (state != 'processing' && msg.rendered)" :msg="msg" />
	</view>
</template>

<script>
	import {uniAi, MsgItem} from '@/uni_modules/uni-ai-x/sdk'
	import {useMarked, TokensList, NodesToken as MarkdownToken, Link} from '@/uni_modules/kux-marked';
	import {IToken, parseCode, ParseCodeRes} from '@/uni_modules/uni-ai-x/components/uni-ai-msg-code/parseCode.uts'
	const marked = useMarked();
	import testMarkdownText from './testMarkdownText.uts';
	import msgToolBar from '@/uni_modules/uni-ai-x/components/msg-tool-bar.uvue'
	// import testMarkdownNode from './testMarkdownNode.uts';

	export default {
		name: 'msg-uni-ai',
		emits: ['changeThinkContent'],
		components: {
			msgToolBar
		},
		props: {
			msg: {
				type: Object as PropType<MsgItem>,
				required: true,
				default: {},
			}
		},
		data() {
			return {
				// 耗时
				runTime: 0,
				parseLock: false,
				lastParseLineCodeText: '',
				// 是否隐藏深度思考
				hideThinkContent: false,
				// 准备解析的 markdown 文本索引
				readyParseMdIndex: 0,
				// 已解析的 markdown 文本索引
				parseMdIndex: 0
			}
		},
		computed: {
			// 是否是自己发送的消息
			state(): string {
				return uniAi.currentChat!.state
			},
			isLastAiMsg(): boolean {
				return uniAi.lastAiMsg?._id == this.msg._id
			},
			uiTheme(): string {
				return uniAi.setting.theme
			}
		},
		watch: {
			'msg.body': {
				async handler(msgBody: string) {
					if (msgBody.length == 0) {
						this.readyParseMdIndex = 0
						this.parseMdIndex = 0
						this.parseLock = false
					}
					if (this.state == 'processing') {
						// this.runTask()
					} else {
						// console.log('this.msg.body', this.msg.body)
					}

					// 测试代码 模拟解析固定的md
					// const testMd = testMarkdownText
					// const TokensList = marked.lexer(testMd,null) as TokensList
					// console.log('TokensList----------', TokensList)
				},
				// immediate: true
			},
			state: {
				handler(state: string) {
					if (state == 'completed' || state == 'stop') {
						// console.log('this.msg.body', this.msg.body)
					}
				}
			}
		},
		mounted(){
			// this.testRun()
			// console.log('this.msg.body', this.msg.body)
		},
		methods: {
			toLink(url: string | null) {
				if (url != null && url!.length > 0) {
					console.error('url', url)
					uni.navigateTo({
						"url":"/uni_modules/uni-ai-x/pages/common/webview/webview?url="+url,
						fail:e=>{
							console.error(e);
						}
					})
				}
			},
			changeThinkContent() {
				this.hideThinkContent = !this.hideThinkContent
				this.$emit('changeThinkContent', this.hideThinkContent)
			}
		}
	}
</script>

<style lang="scss">
	.msg-root {
		flex-direction: row;
		flex-wrap: wrap;
		background-color: #fff;
		// #ifdef WEB
		user-select: text;
		// #endif
		padding: 0 45px;
		.avatar {
			position: absolute;
			top: 0;
			left: 10px;
			width: 25px;
			height: 25px;
			padding: 3px;
			border-radius: 50px;
			border: 1px solid #EEE;
		}
		/* #ifdef H5 */
		@media screen and (min-device-width:960px){
			.avatar {
				margin-right: 10px;
			}
		}
		/* #endif */
		.think-content {
			.header {
				flex-direction: row;
				// #ifdef H5
				cursor: pointer;
				// #endif
				.title {
					color: #888;
				}
			}
			.text-box {
				margin-top: 10px;
				border-left: 3px solid #efefef;
				padding-left: 10px;
				&.hideThinkContent {
					margin-top: 0;
					height: 0;
				}
				.text {
					text-align: left;
					color: #999;
				}
			}
		}

		.error-msg {
			color: #ff4d4f;
			font-size: 14px;
			line-height: 26px;
		}
				
		.loging-icon {
			margin-top: 10px;
			width: 16px;
			height: 16px;
		}
		.stop-text {
			color: #AAA;
			font-size: 14px;
			padding: 10px 0;
		}
		.need-try {
			color: #ff4d4f;
			font-size: 14px;
			padding: 10px;
		}
		.error-msg,.stop-text,.need-try {
			text-align: left;
			width: 100%;
		}
	}
	// 暗黑模式
	.ui-theme-dark {
		padding: 5px;
		background-color: #29292d;
		.msg-root {
			.paragraph .text{
				color: #fff !important;
			}
			.blockquote {
				background-color: #3c3c3c !important;
				.text {
					color: #fff !important;
				}
			}
			
		}
	}


	// 元素的样式
	@font-face {
		// #ifdef WEB
		font-display: swap;
		// #endif
		font-family: uniAiIconFontFamily;
		src: url('/uni_modules/uni-ai-x/static/font/iconfont.ttf');
	}
	.uni-ai-icon {
		font-family: uniAiIconFontFamily;
	}
	
	.text {
		color: #333;
		// line-height: 1.5; // TODO：解决 text 嵌套会重叠文本的问题
		white-space: normal;
		/* #ifndef APP */
		word-break: break-all;
		max-width: 100%;
		/* #endif */
	}
	.strong {
		font-weight: bold;
	}
	
	.em {
		font-style: italic;
	}
	
	.del {
		text-decoration-line: line-through;
		color: #999;
	}

	.space {
		height: 10px;
	}
	.link {
		color: #0066cc!important;
		// #ifdef WEB
		cursor: pointer;
		&:hover {
			opacity: 0.8;
		}
		// #endif
	}
	// .image {
	// 	max-width: 60%;
	// }

	.paragraph-box {
		.text {
			font-size: 18px;
			// 自动换行
			white-space: normal;
			/* #ifndef APP */
			max-width: 100%;
			word-break: break-all;
			/* #endif */
		}
	}
	
	.blockquote-box {
		padding: 5px;
		background: #f5f5f5;
		border-left: 4px solid #ddd;
	}
	.heading-box {
		.text {
			font-weight: 700;
		}
		.depth-1 {
			font-size: 30px;
			line-height: 36px;
		}

		.depth-2 {
			font-size: 26px;
			line-height: 34px;
		}

		.depth-3 {
			font-size: 22px;
			line-height: 32px;
		}

		.depth-4 {
			font-size: 20px;
			line-height: 30px;
		}

		.depth-5 {
			font-size: 18px;
			line-height: 28px;
		}

		.depth-6 {
			font-size: 16px;
			color: #999;
			line-height: 24px;
		}
	}

	.hr {
		height: 1px;
		background: #ddd;
		margin: 10px 0;
	}

	.list-box {
		padding-left: 5px;
		.list-content {
			width: 100%;
		}
		.text {
			line-height: 28px;
		}
		.list-item-content-box {
			flex: 1;
			.list {
				margin-top: 0;
			}
		}
		.list-item-br {
			width: 100%;
		}
		.list-item-index {
			width: 20px;
			&.unordered {
				font-size: 14px;
				color: #000;
			}
			&.task {
				font-size: 14px;
				color: #666;
			}
		}
	}

	.hr-box {
		background-color: #ddd;
		height: 1px;
	}

	.table-box, .code-box, .hr-box, .paragraph-box, .blockquote-box, 
	.heading-box, .list-box, .loging-icon, .think-content 
	{
		width: 100%;
		margin: 5px 0 13px 5px;
	}
	.paragraph-box {
		margin-top: 0;
		margin-bottom: 0;
	}

	.space-box {
		height: 15px;
	}

	.codespan {
		color: #666;
		background-color: #f5f5f5;
		padding: 2px 4px;
		border-radius: 5px;
		font-size: 14px;
	}

	.ui-theme-dark {
		background-color: #25282c;
		.text {
			color: #fff !important;
		}
		.strong {
			color: #fff !important;
		}
		.em {
			color: #fff !important;
		}
		.del {
			color: #999 !important;
		}
		.link {
			color: #0066cc !important;
		}
		.heading {
			color: #fff !important;
		}
		.list {
			.list-item-index {
				color: #fff !important;
			}
		}
	}
</style>