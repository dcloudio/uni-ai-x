<template>
	<view class="chat-box" :class="{'ui-theme-dark': uiTheme == 'dark'}">
		<view class="nav-bar">
			<uni-ai-icon @click="changeMenu" code="e622" color="#000" size="20"></uni-ai-icon>
			<text class="chat-title">{{chatTitle}}</text>
			<!-- #ifndef MP-WEIXIN -->
			<addChat></addChat>
			<!-- #endif -->
			<!-- #ifdef MP-WEIXIN -->
			 <!-- 微信小程序端特殊占位 -->
			<view></view>
			<!-- #endif -->
		</view>
		<view class="chat" :class="{showMenu}" ref="chat">
			<view class="scroll-view-box">
				<scroll-view direction="vertical" class="msg-list" :scroll-into-view="scrollIntoView" id="msg-list"
					:scroll-with-animation="scrollWithAnimation" @scroll="onScroll" @touchstart="scrollTouch = true" @touchend="scrollTouch = false"
				>
					<template v-for="item in msgList" :key="item._id" class="msg-item" :class="{'self': item.from_uid != 'uni-ai'}">
						<uni-ai-x-msg v-if="item.from_uid == 'uni-ai'" :msg="item" @longpress="onlongTapMsg(item)" @changeThinkContent="changeThinkContent" :id="'msg-item-' + item._id"></uni-ai-x-msg>
						<text v-else class="user-msg" @longpress="onlongTapMsg(item)">{{item.body}}</text>
					</template>
					<view class="welcome-msg-box" v-if="msgList.length == 0">
						<image class="logo" src="@/uni_modules/uni-ai-x/static/uni-chat-logo.png"/>
						<text class="title">嗨！我是 UNI-AI</text>
						<text class="text">我可以帮你回答问题、写代码、翻译、写诗等。</text>
					</view>
					<!-- 最后一项，用于快速滚动到最底部 -->
					<view style="height: 35px;" id="last-msg"></view>
				</scroll-view>
				<add-chat-btn :style="{visibility: scrollInBottom && state != 'processing' ? 'visible' : 'hidden'}" class="add-chat-btn" />
				<!-- 滚动到最底部 -->
				<view :style="{visibility: scrollInBottom || scrolling ? 'hidden' : 'visible'}" class="scroll-to-bottom" @click="scrollToLastMsg(true)">
					<uni-icons type="down" size="20" color="#555"></uni-icons>
				</view>
			</view>
			<view class="bottom">
				<textarea class="chat-input" v-model="chatInputContent" placeholder="给 uni-ai-x 发送消息"
					:adjust-position="false" @keyboardheightchange="onKeyboardheightchange" placeholder-class="chat-input-placeholder"
					@focus="scrollToLastMsg(true, 300)" :auto-height="true"
				></textarea>
				<input-tool-bar @scrollToLastMsg="scrollToLastMsg(true)" />
				<!-- 开启键盘时，底部背景高度为键盘高度 -->
				<view class="keyboard-cover" :style="{height: keyboardHeight + 'px'}"></view>
			</view>
			<text class="tip">内容由ai生成，仅供参考</text>
		</view>
		<view class="mask" v-if="translateX != -260" @click="closeMenu" :style="{
			opacity: (translateX + 260) / 260,
			backgroundColor: `rgba(0,0,0,${0.3 * (translateX + 260) / 260})`
		}"></view>
	</view>
</template>

<script lang="uts">
	import {uniAi, MsgItem, markdownElItem} from '@/uni_modules/uni-ai-x/sdk/'
	import addChat from '@/uni_modules/uni-ai-x/components/add-chat.uvue'
	import addChatBtn from '@/uni_modules/uni-ai-x/components/add-chat-btn.uvue'
	import inputToolBar from '@/uni_modules/uni-ai-x/components/input-tool-bar.uvue'
	
	export default {
		emits: ['change-menu', 'close-menu'],
		components: {
			addChatBtn,
			addChat,
			inputToolBar
		},
		props: {
			showMenu: {
				type: Boolean,
				default: false
			},
			translateX: {
				type: Number,
				default: -260
			}
		},
		data() {
			return {
				keyboardHeight: 0,
				scrollIntoView: '',
				scrollInBottom: true,
				scrollWithAnimation: false,
				autoToLastMsg: false,
				// 是否被按住滚动
				scrollTouch: false,
				// 是否正在滚动
				scrolling: false,
				scrollingT: 0 as number,
				// 是否鼠标滚轮滚动
				mouseScroll: false,
				needSetLockAutoToLastMsg: true
			}
		},
		computed: {
			state(): string {
				return uniAi.currentChat?.state ?? 'none'
			},
			uiTheme(): string {
				return uniAi.setting.theme
			},
			msgList(): MsgItem[] {
				return uniAi.currentChat?.msgList ?? []
			},
			chatInputContent: {
				get(): string {
					return uniAi.currentChat?.inputContent ?? ''
				},
				set(value: string) {
					uniAi.currentChat!.inputContent = value
				}
			},
			lastMsg(): MsgItem | null {
				return uniAi.lastAiMsg
			},
			chatActiveId(): string {
				return uniAi.chat.activeId
			},
			chatTitle(): string {
				const title = uniAi.currentChat?.title ?? ''
				if (title.length > 0) {
					// 如果标题长度大于10，则截取前10个字符，并添加省略号
					return title.length > 10 ? title.slice(0, 10) + '...' : title
				}
				return '新对话'
			}
		},
		watch: {
			scrollInBottom: {
				handler() {
					uniAi.canRender = !this.scrollTouch && !this.scrolling
				},
				immediate: true
			},
			scrolling: {
				handler() {
					uniAi.canRender = !this.scrollTouch && !this.scrolling
				},
				immediate: true
			},
			// scrollTouch: {
			// 	handler() {
			// 		uniAi.canRender = this.scrollInBottom && !this.scrollTouch
			// 	},
			// 	immediate: true
			// },
			chatActiveId: {
				handler(newVal: string) {
					this.scrollToLastMsg(false)
					setTimeout(() => {
						if (this.lastMsg != null) this.lastMsg.rendered = true
					}, 100)
				},
				deep: true,
				immediate: true
			},
			lastMsg: {
				// 消息内容变化
				async handler() {
					// 设置是否在滚动条底部（控制显示点击滚动到最底部的按钮，和开启新对话的按钮）
					this.setIsInScrollBottom()
					this.lockAutoToLastMsg()
					// 滚动条被按住滚动、被锁定，则不自动滚动到最底部
					if (!this.scrollTouch && this.autoToLastMsg) {
						// 如果最后一条消息变化，则滚动到最底部
						await nextTick()
						this.scrollToLastMsg(false)
					}
				},
				deep: true
			}
		},
		mounted() {
			uniAi.onBeforeRequestAi(() => {
				// console.log('onBeforeRequestAi')
				this.autoToLastMsg = true
				this.needSetLockAutoToLastMsg = true
				this.scrollToLastMsg(false)
			})
			// 监听鼠标滚轮滚动
			// #ifdef H5
			window.addEventListener('wheel', (e: WheelEvent) => {
				this.mouseScroll = true
				let clear: number = 0
				clear = setTimeout(() => {
					this.mouseScroll = false
					clearTimeout(clear)
				}, 1000)
			})
			// #endif
			setTimeout(() => {
				// uniAi.currentChat!.inputContent = "展示各类简版的Mar1kdown渲染效果（不需要代码块包裹），包括：1-6 级标题、列表（含：有序、无序、任务列表）、表格、JS代码实例，链接、引用、文字样式语法（加粗、斜体、删除线）、分割线"
			}, 1000)
		},
		methods: {
			changeThinkContent(hideThinkContent: boolean) {
				this.setIsInScrollBottom()
			},
			lockAutoToLastMsg() {
				if (!this.needSetLockAutoToLastMsg) return
				const lastMsgEl: UniElement | null = uni.getElementById('msg-item-' + this.lastMsg?._id)
				const scrollList: UniElement | null = uni.getElementById('msg-list')
				if (lastMsgEl == null || scrollList == null) return 
				// 最后一个消息高度大于滚动列表的高度
				if (this.msgList.length < 3 || scrollList.offsetHeight < lastMsgEl.offsetHeight) {
					this.autoToLastMsg = false
					this.needSetLockAutoToLastMsg = false
				}
			},
			onlongTapMsg(item: MsgItem) {
				if (this.scrolling) {
					// 防止滚动误触长按事件
					return
				}
				// console.log('onlongTapMsg',item)
				// 判断是用户消息还是ai消息
				// 弹出菜单
				const itemList = ['复制'] as string[]
				const isAiMsg = item.from_uid == 'uni-ai'
				itemList.push(isAiMsg ? '选择' : '修改')
				uni.showActionSheet({
					itemList,
					success: (res: ShowActionSheetSuccess) => {
						// console.log('res',res)
						if (res.tapIndex == 0) {
							uni.setClipboardData({
								data: item.body,
								success: () => {
									setTimeout(()=>{
										uni.showToast({
											title: '复制成功',
											icon: 'success'
										})
									},300)
								}
							})
						} else if (res.tapIndex == 1) {
							if (isAiMsg) {
								console.log('选择')
								uni.navigateTo({
									url: '/uni_modules/uni-ai-x/pages/select-text/select-text?msgId=' + item._id,
									fail(err){
										console.error('err', err)
									}
								})
							} else {
								console.log('修改')
								this.chatInputContent = item.body
							}
						}
					},
					fail(err){
						// console.error('err------', err)
					}
				})
			},
			onKeyboardheightchange(res: UniInputKeyboardHeightChangeEvent){
				this.keyboardHeight = res.detail.height
			},
			changeMenu() {
				this.$emit('change-menu')
			},
			closeMenu() {
				this.$emit('close-menu')
			},
			setIsInScrollBottom() {
				setTimeout(() => {
					// 滚动条距离底部的值
					const scrollList = uni.getElementById('msg-list')
					const diff: number = scrollList!.scrollHeight - scrollList!.scrollTop - scrollList!.offsetHeight
					this.scrollInBottom = diff < 30
					// 根据人为滚动，锁定是否自动滚动到最底部。前提：手按住滚动条，或者鼠标滚轮滚动
					if (this.scrollTouch || this.mouseScroll) {
						this.autoToLastMsg = !(diff > 3)
					}
				}, 100)
			},
			onScroll(e: UniScrollEvent) {
				this.setIsInScrollBottom()
				// 设置滚动状态
				this.scrolling = true
				if (this.scrollingT != 0) {
					clearTimeout(this.scrollingT)
				}
				this.scrollingT = setTimeout(() => {
					this.scrolling = false
				}, 500)
			},
			scrollToLastMsg(userClick: boolean = true, delay: number = 100) {
				this.autoToLastMsg = true
				this.scrollIntoView = ""
				this.scrollWithAnimation = userClick
				setTimeout(() => {
					this.scrollIntoView = "last-msg"
					this.scrollInBottom = true
				}, delay)
			}
		}
	}
</script>

<style lang="scss">
.chat-box {
	width: 750rpx;
	padding-top: env(safe-area-inset-top);
	.nav-bar {
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		padding:10px;
		background-color: #FFF;
		.chat-title {
			font-size: 16px;
		}
		/* #ifdef MP-WEIXIN */
		padding-top: calc(var(--status-bar-height) + 35px);
		/* #endif */
	}
	.mask {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0,0,0,0.3);
	}
	::v-deep {
		/* #ifdef WEB */
		position: relative;
		.popup-root {
			top: 0;
			right: 0;
			left: unset;
			width: calc(100% - 260px);
		}
		/* #endif */
	}
	.chat {
		flex: 1;
		background-color: #FFF;
		.scroll-view-box {
			flex: 1;
			position: relative;
			.msg-list {
				flex: 1;
				.user-msg {
					font-size: 16px;
					margin-left: auto;
					margin-right: 10px;
					margin-bottom: 10px;
					max-width: 600rpx;
					padding: 12px;
					border-radius: 15px 15px 0 15px;
					background-color: #eff6ff;
					/* #ifdef WEB */
					// 可以滑选 用于复制
					cursor: text;
					user-select: text;
					white-space: pre-wrap;
					word-break: break-all;
					/* #endif */;
				}
				.welcome-msg-box {
					margin: auto 20px;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					.logo {
						width: 50px;
						height: 50px;
						margin-bottom: 20px;
					}
					.title {
						font-size: 24px;
						font-weight: bold;
						color: #333;
						margin-bottom: 10px;
					}
					.text {
						font-size: 16px;
						color: #666;
						text-align: center;
						line-height: 24px;
						margin: 0 30px;
					}
				}
			}
			.add-chat-btn {
				position: absolute;
				bottom: 5px;
				left: 50%;
				transform: translateX(-50%);
			}
			.scroll-to-bottom {
				position: absolute;
				bottom: 10px;
				right: 10px;
				width: 35px;
				height: 35px;
				justify-content: center;
				align-items: center;
				background-color: #FFF;
				border-radius: 50px;
				padding: 5px;
				box-shadow: 0 0 10px 0 rgba(0,0,0,0.3);
				// #ifdef APP-HARMONY
				border: 1px solid #efefef;
				// #endif
				z-index: 10;
			}
		}
		.bottom {
			flex-direction: column;
			background-color: #FFF;
			padding: 15px 15px 5px 15px;
			border-radius: 15px 15px 0 0;
			border: 1px solid #eee;
			// box-shadow: 10px 10px 0 0 rgba(0,0,0,0.1);
			.chat-input {
				min-height: 50px;
				max-height: 200px;
				width: 100%;
			}
			.chat-input-placeholder {
				color: #b9babc;
			}
			// 键盘弹出后，垫高底部。默认占位大小为底部安全区域高度
			.keyboard-cover {
				// Android 的键盘高度不包含安全区域高度，其他平台包含
				// #ifdef APP-ANDROID
				margin-bottom: env(safe-area-inset-bottom);
				// #endif
				// #ifndef APP-ANDROID
				padding-bottom: env(safe-area-inset-bottom);
				// #endif
			}
		}
		.tip {
			display: none;
		}
	}
}

.ui-theme-dark {
	&.chat-box {
		background-color: #212327;
		.nav-bar {
			background-color: #212327;
			border-bottom-color: #333;
		}
		.chat {
			background-color: #212327;
			.msg-list {
				.user-msg {
					background-color: #2c4166;
					color: #e0e0e0;
				}
				.welcome-msg {
					color: #999;
				}
			}
			.bottom {
				background-color: #2c2c2c;
				border-color: #333;
				.chat-input {
					color: #e0e0e0;
					background-color: #2c2c2c;
				}
			}
		}
	}
}

/* #ifdef H5 */
@media screen and (min-device-width:960px){
	.chat-box {
		flex: 1;
		.chat {
			width: 100%;
			max-width: 800px;
			margin:0 auto;
			.scroll-view-box {
				.msg-list {
					.msg-item {
						.user-msg {
							max-width: 90%;
						}
					}
				}
			}
			.bottom {
				border-radius: 15px;
				margin: 10px;
				margin-top: 0;
			}
			.tip {
				display: block;
				width: 100%;
				font-size: 12px;
				text-align: center;
				color: #999;
				margin-bottom: 10px;
			}
		}
		::v-deep {
			.uni-im-msg-list {
				background-color: #FFF;
			}
			.bottom {
				background-color: #FFF;
				.chat-input-root {
					border: 1px solid #ddd;
					margin: 30px 20px;
					border-radius: 20px;
					background-color: #F9F9F9;
					.chat-input {
						margin: 10px 5px 0 5px;
						border: none;
						.uni-webview.edit-box {
							background-color: #F9F9F9;
							height: 110px !important;
						}
					}
					.input-tool-bar {
						margin: 5px 10px;
					}
				}
			}
		}
	}
	.mask {
		display: none;
	}
}
/* #endif */
</style> 